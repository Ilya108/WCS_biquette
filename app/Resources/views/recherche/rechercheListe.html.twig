{% extends 'base.html.twig' %}
{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('build/recherche.css') }}">
{% endblock %}

{% block body %}

    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <div class="container bloc-recherche">
        <div class="row">
            <!-- bloc recherche liste -->
            <div class="container col-12 col-lg-7">
                <div class="row">
                    <!-- barre de tri -->
                    <div class="col-12 col-lg-12">
                        <input id="pac-input" class="controls" type="text" placeholder="Search Box">
                    </div>
                    <div class="col-12 col-lg-12 card-block" id="formatted-address"></div>
                    <div class="col-12 col-lg-12 card-block" id="address-components"></div>
                    <div class="col-12 col-lg-12 card-block" id="geometry"></div>
                    <!-- liste -->
                    <div class="container col-12 col-lg-12">
                        <div class="row annonce">
                            {% for membre in membre %}
                                <!-- annonce -->
                                <div class="item col-6 col-lg-6" data-lat="" data-lng="" data-price="">
                                    <img src="http://via.placeholder.com/400x260" alt="">
                                    <h4>La monture de {{ membre.prenom }}</h4>
                                    <h6></h6>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                    <!-- barre numeros de page -->
                    <div class="col-12 col-lg-12"></div>
                </div>
            </div>
            <!-- maps -->
            <div class="col-12 col-lg-5" id="map"></div>
        </div>
    </div>

    <script>
        //Call Geocode
        geocode();

        function geocode(){
            var location = 'brumath';
            axios.get('https://maps.googleapis.com/maps/api/geocode/json',{
                params:{
                    address: location,
                    key:'AIzaSyDcSv2oPG3tP4f_DFHF_VgyvfhMDTtyFlA'
                }
            })
                .then(function(response){
                    // Log full response
                    console.log(response);

                    // Formatted Address
                    var formattedAddress = response.data.results[0].formatted_address;
                    var formattedAddressOutput = '<ul class="list-group"><li class="list-group-item">'+ formattedAddress +'</li></ul>';

                    // Address Components
                    var addressComponents = response.data.results[0].address_components;
                    var addressComponentsOutput = '<ul class="list-group">';
                    for(var i = 0;i < addressComponents.length;i++){
                        addressComponentsOutput +=
                            '<li class="list-group-item"><strong>'+ addressComponents[i].types[0] +'</strong>:'+ addressComponents[i].long_name +'</li>';
                    }
                    addressComponentsOutput += '</ul>';

                    // Geometry
                    var lat = response.data.results[0].geometry.location.lat;
                    var lng = response.data.results[0].geometry.location.lng;
                    var geometryOutput =
                        '<ul class="list-group">' +
                        '<li class="list-group-item"><strong>Latitude</strong>:'+ lat +'</li>' +
                        '<li class="list-group-item"><strong>Longitude</strong>:'+ lng +'</li>' +
                        '</ul>';

                    // Output to app
                    document.getElementById('formatted-address').innerHTML = formattedAddressOutput;
                    document.getElementById('address-components').innerHTML = addressComponentsOutput;
                    document.getElementById('geometry').innerHTML = geometryOutput;
                })
                .catch(function(error){
                    console.log(error);
                });
        }
    </script>

    <script>
        // This example adds a search box to a map, using the Google Place Autocomplete
        // feature. People can enter geographical searches. The search box will return a
        // pick list containing a mix of places and predicted search terms.

        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        function initAutocomplete() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: -33.8688, lng: 151.2195},
                zoom: 13,
                mapTypeId: 'roadmap'
            });

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function() {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function() {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function(marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function(place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });
        }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDcSv2oPG3tP4f_DFHF_VgyvfhMDTtyFlA&libraries=places&callback=initAutocomplete"
            async defer></script>
    </html>

{% endblock %}

